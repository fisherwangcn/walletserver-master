ip:188.131.189.159:7006

0、基本接口
0.1 注册接口 完成
入参：POST /api/user
{
token:xx,
phone:xx, --暂时只支持手机号注册，接口内部对于重复手机号进行了校验
passwd:xx,
recommend_user_id:xx --推荐人,-1代表没有推荐人
area:xx,--地域，默认中国北京1001
}

逻辑：用户成功注册之后，会自动添加一个账本，将用户自身放置在账本中

出参：
{
code:0,
msg:"success",
data:{id:xx}
}

{
code:-2,
msg:"该手机号已经注册"
}

实际调用实例：
{
"token":"xx",
"phone":13800138001,
"passwd":"123abc",
"recommend_user_id":"1",
"area":1011
}

0.2 登陆接口 完成
POST  /api/login
{
token:xx,
phone:xx,
passwd:xx
}


出参：
{
code:0,
msg:"success",
data:{id:xx}
}

{
code:-2,
msg:"账号或者密码错误"
}

实际：
{
"token":"xx",
"phone":13800138001,
"passwd":"123abc",
"recommend_user_id":"1",
"area":1011
}
出参：
{
    "msg": "success",
    "code": 0,
    "data": {
        "area": "1011",
        "phone": "13800138001",
        "id": 4,
        "recommendUserId": 1
    }
}

1、记账类接口
1.1 查询单条记账详情
GET /api/account_money/detail?token=xx&money_id=xx
出参：
{
    "msg": "success",
    "code": 0,
    "data": {
        "id": 1,
        "userId": 1,
        "type": 0,
        "catecoryId": 1001,
        "money": 30,
        "createtime": 1543763252,
        "updatetime": 1543763457,
        "comment": "牛肉饭 ，鸡肉饭",
        "bookId": 1,
        "year": 2018,
        "month": 12,
        "day": 2,
        "disable": 0
    }
}

1.2 查询记账记录list，按照天为维度进行记录
GET /api/account_money/list?token=xx&user_id=xx&year=-1&month=-1&day=-1 可以传入具体的日期，传入-1代表当前年/月/日
出参：
{
    "msg": "success",
    "code": 0,
    "data": [
        {
            "id": 1,
            "userId": 1,
            "type": 0,
            "catecoryId": 1001,
            "money": 30,
            "createtime": 1543763252,
            "updatetime": 1543763457,
            "comment": "牛肉饭 ，鸡肉饭",
            "bookId": 1,
            "year": 2018,
            "month": 12,
            "day": 2,
            "disable": 0
        }
    ]
}

1.3 新增记账
POST /api/account_money
{
token:xx,
book_id:xx,--当前账本id
user_id:xx,--记账人
type:{0--支出/1--收入}
catecory_id:xx--类别,
money:xx,--金额
comment:xx --记账说明
}

入参：
{
"token":"xx",
"book_id":1,
"user_id":1,
"type":0,
"catecory_id":1001,
"money":20.5,
"comment":"牛肉饭"
}

出参：
{
    "msg": "success",
    "code": 0,
    "data": {
        "id": 1,
        "userId": 1,
        "type": 0,
        "catecoryId": 1001,
        "money": 20.5,
        "createtime": 1543763252,
        "updatetime": 1543763252,
        "comment": "牛肉饭",
        "bookId": 1,
        "year": 2018,
        "month": 12,
        "day": 2,
        "disable": 0
    }
}

1.4 修改/删除 记账详细信息
POST /api/account_money/update
{
id:xx,
type:{0--支出/1--收入}
catecory_id:xx--类别,
money:xx,--金额
comment:xx --记账说明
delete:-1/1 --如果删除则置位1
}

2、用户类接口
2.1 新增用户 废弃
POST /api/user
{
token:xx,
phone:xx,
passwd:xx
}

2.2 获得具体用户信息
GET /api/user?token=xx&id=xx

2.3 修改用户信息
POST /api/user
{
token:xx,
id:xx, --必填
name:xx, --没有修改则不发送
wxid:xx,
phone:xx,
area:xx,
email:xx
}

2.4 用户奖励信息接口

3、共享账本接口
简单说明：
记账本(多)——用户(多)
3.1 创建记账本接口 完成
POST /api/account_book
{
token:xx,
name:xx,
msg:xx,
owner_id:xx --账本的所有者，即user_id
}

出参：
{
code:0,
msg:"success",
data:{xx--账本详细信息}
}


{
code:-1,
msg:"内部错误"
}

实际：
入参：{
   "token":"xx",
   "name":"非常重要的记账本",
   "msg":"这是一个非常重要的记账本",
   "owner_id":3
   }
出参：{
       "msg": "success",
       "code": 0,
       "data": {
           "id": 4,
           "name": "非常重要的记账本",
           "msg": "这是一个非常重要的记账本",
           "creatime": 1543742019,
           "ownerId": 3,
           "disable": -1
       }
   }


3.2 加入某个记账本接口 完成
POST /api/account_book/add_user
{
token:xx,
account_book_id:xx,
user_id:xx --申请者
msg:xx--申请理由
}
实际：
入参：
{
"token":"xx",
"account_book_id":4,
"user_id":4,
"msg":"我希望加入你的记账本"
}

出参：
{
    "msg": "success",
    "code": 0,
    "data": {
        "id": 1,
        "accountBookId": 4,
        "userId": 4,
        "createtime": 1543742143,
        "disable": -1,
        "type": 0
    }
}

3.3 展示某个人的所有审批申请列表 完成 （我申请的）
GET /api/account_book/add_user_list?token=xx&user_id=xx&type={0--未审批,1--通过,2--拒绝,3--所有审批单子}
出参：
{
code:0,
msg:"",
data:{
user_id:xx,
add_user_list:[{auditing_id:xx,account_name:xx,user_id:xx,msg:xx,type:{0/1/2}},...]
}
}

实际：
入参：
/api/account_book/add_user_list?token=xx&user_id=4&type=3

出参：
{
    "msg": "success",
    "code": 0,
    "data": [
        {
            "id": 1,
            "accountBookId": 4,
            "userId": 4,
            "createtime": 1543742143,
            "disable": -1,
            "type": 0
        }
    ]
}

3.3.1 展示某个人的所有审批处理列表 完成 （我需要审批的）
GET /api/account_book/add_user_aduit_list?token=xx&user_id=xx&type={0--未审批,1--通过,2--拒绝,3--所有审批单子}
出参：
{
code:0,
msg:"",
data:{
user_id:xx,
add_user_list:[{auditing_id:xx,account_name:xx,user_id:xx,msg:xx,type:{0/1/2}},...]
}
}

实际：
入参：
/api/account_book/add_user_aduit_list?token=xx&user_id=3&type=3

出参：
{
    "msg": "success",
    "code": 0,
    "data": [
        {
            "id": 1,
            "accountBookId": 4,
            "userId": 4,
            "createtime": 1543742143,
            "disable": -1,
            "type": 0
        }
    ]
}

3.4 审批加入申请接口 完成
POST /api/account_book/auditing
{
token:xx,
user_id:xx,
auditing_id:xx,
type:{1/2},
msg:xx -- 审批意见
}
入参：
{
"token":"xx",
"auditing_id":1,
"user_id":1,
"msg":"欢迎",
"type":1
}


3.4 展示账本所有成员  完成
GET /api/account_book/user_list?token=xx&book_id=xx
出参：{
code:0,
msg:xx,
data:{
book_id:xx,
book_name:xx,
msg:xx,
users:[user_name,user_name,...]
}
}

出参：
{
    "msg": "success",
    "code": 0,
    "data": [
        {
            "accountBookId": 2,
            "userId": 1,
            "createtime": 1543743723,
            "disable": 0
        },
        {
            "accountBookId": 2,
            "userId": 2,
            "createtime": 1543744339,
            "disable": -1
        }
    ]
}

3.5 展示个人拥有的全部账本 完成
GET /api/account_book/all?token=xx&user_id=xx
出参：
{
code:0,
msg:xx,
data:{
book_list:[{name:xx,msg:xx,user_id:xx--这里是指账本所有者},...]
}
}

出参：
{
    "msg": "success",
    "code": 0,
    "data": [
        {
            "accountBookId": 2,
            "userId": 2,
            "createtime": 1543744339,
            "disable": -1
        },
        {
            "accountBookId": 3,
            "userId": 2,
            "createtime": 1543743750,
            "disable": 0
        }
    ]
}
4、计划花销额度接口
说明：每个记账本对于某个分类拥有一个额度
4.1 初始化额度接口

4.2 修改额度接口

5、奖励机制接口
5.1 新增奖励记录

6、商城接口
6.1 商城购买接口


7、阅读接口
7.1 图片上传接口
注意现今只能将所有格式的图片转为jpg，返回格式也是jpg。
入参：
POST /api/picture/upload
{
token:xx,
pic_name:xx --图片名称，系统默认在图片名称前加上时间戳
pic_content:xx --base64字符串
}

出参：
{
code:0,
data:{
url:xx
}
}

7.2 文章新增接口
注意图片的问题，这里需要将图片转为具体的url，如果已经是url则不转换。
POST /api/news
{
    news_id:xx --文章id，传入代表修改
    name:xx --标题
    abstracts:xx --文章简介，默认文章取前10个字符
    conver_pic:xx --封面图，默认文章中第一个图片
    category_id:xx --类别
    owner_id:xx --所有者 --基于baserequest获取
    content:xx --html内容
    audit:1/-1 1代表审核通过，-1代表不通过，默认通过
    createtime:xx --发布时间 --不传
}

7.3 文章详情
GET /api/news?token=xx&id=xx
出参：{
    news_id:xx --文章id，传入代表修改
    name:xx --标题
    abstracts:xx --文章简介，默认文章取前10个字符
    conver_pic:xx --封面图，默认文章中第一个图片
    category_id:xx --类别
    owner_id:xx --所有者 --基于baserequest获取
    content:xx --html内容
    audit:1/-1 1代表审核通过，-1代表不通过，默认通过
    createtime:xx --发布时间 --不传
}

7.4 文章列表
获得文章列表时不回传具体的内容
GET /api/news_list?token=xx&start_time=xx
start_time代表此时间之后的新闻，默认-1即所有文章
[{
    news_id:xx --文章id，传入代表修改
    name:xx --标题
    abstract:xx --文章简介，默认文章取前10个字符
    conver_pic:[xx,xx,xx] --json格式的图片数组，存储的url 封面图，默认文章中第一个图片
    categroy_id:xx --类别
    owner:xx --所有者
    audit:1/-1 1代表审核通过，-1代表不通过，默认通过
    createtime:xx --发布时间
}...]

8、商城接口
8.1 商品新增/修改
POST /api/goods
{
    goods_id:xx,--传入则代表修改
    name:xx, --标题 ，支持空格
    price:xx,
    discount_price:xx,折扣价格
    abstract --简介
    conver_pic:xx json格式的图片数组，存储的url ，现阶段默认只支持1张；初次上传时需要指定图片的content内容
    detail:xx --html内容，和文章页面一致
}

8.2 商品详情
GET /api/goods?token=xx&goods_id=xx
出参：
{
    goods_id:xx,--传入则代表修改
    name:xx, --标题 ，支持空格
    price:xx,
    discount_price:xx,折扣价格
    abstract --简介
    conver_pic:xx json格式的图片数组
    detail:xx --html内容，和文章页面一致
}

8.3 商品列表
GET /api/goods_list?token=xx
[
    {
    goods_id:xx,--传入则代表修改
    name:xx, --标题 ，支持空格
    price:xx,
    discount_price:xx,折扣价格
    abstract --简介
    conver_pic:xx json格式的图片数组,只有一张
    }...
]

8.4 商品购买 此处不明晰，没有完成
需要保证用户的唯一性和准确性，
需要保证用户的资金额保持扣款状态，上锁

用户将订单信息填写完成之后，将server端确认的信息进行用户预览？？？是否需要
POST /api/goods_buy
{
    goods_id:xx,
    user_id:xx --这里要保证唯一性，防止他人盗用user_id造成灾难性损失
}

8.5 订单信息